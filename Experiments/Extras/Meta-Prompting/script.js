    // Theme toggle logic
    const themeBtn = document.getElementById('theme-toggle');
    const themeLabel = document.getElementById('theme-label');
    function setTheme(isDark) {
    if(isDark) {
    document.body.classList.remove('light');
    themeLabel.textContent = '🌙 Dark';
    } else {
    document.body.classList.add('light');
    themeLabel.textContent = '☀️ Light';
    }
    localStorage.setItem('metaPromptTheme', isDark ? 'dark' : 'light');
    }
    themeBtn.addEventListener('click', () => {
    const isDark = !document.body.classList.contains('light');
    setTheme(!isDark);
    });
    (() => {
    const pref = localStorage.getItem('metaPromptTheme');
    if(pref === 'light') setTheme(false);
    else if(pref === 'dark') setTheme(true);
    else if(window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) setTheme(false);
    else setTheme(true);
    })();

    // Step-by-step flow
    const steps = [
    {
    type: "input",
    label: "Input",
    code: `Act as the best prompt engineer.
    Based solely on the information I provide,
    craft the most effective and optimized prompt possible,
    tailored specifically to my goal, audience, and the intended platform: [Bolt AI].

    Do not include code, explanations, or external content—only return the final, refined prompt I can use directly.

    I want default dark theme HTML with a toggle to light theme available.
    I want you to use only pure HTML, JS, CSS. CDN links are allowed.
    Also link to <link rel="icon" href="https://raw.githubusercontent.com/Runarok/GenAI-plus/main/GenAI-plus.png" type="image/png">.
    It's a Sudoku gaming friend-like. Has a proper menu.
    I can start either by letting AI give me the Sudoku or let me input a Sudoku board.

    The gameplay should be like: after I start either way, the board should be made accordingly. I can do the game.

    Else, I can on the Sudoku bot toggle. Then I can make the Sudoku bot be like a friend.
    I can ask it to do next step, and bot will help me do the next step and also tells me why the step is correct and such.
    It can tell me when I do wrong thing. It should mainly be in the present, looks at current board and give me the tip/hint.
    If none can be made, it should guess and do and also be correct properly.`
    },
    {
    type: "output",
    label: "AI Output",
    code: `Create a fully functional Sudoku web app using only pure HTML, CSS, and JavaScript (no JSX, TSX, imports, or exports).
    CDN links are allowed.

    Requirements:
    - Default dark theme with a toggle switch to light theme
    - Include favicon: <link rel="icon" href="https://raw.githubusercontent.com/Runarok/GenAI-plus/main/GenAI-plus.png" type="image/png">
    - A clean and intuitive menu interface:
    - Option to start with a Sudoku puzzle generated by AI
    - Option to manually input a Sudoku puzzle
    - Once started:
    - Display and manage the Sudoku board interactively
    - Allow user gameplay (enter numbers, make changes)
    - Include a "Sudoku Bot" toggle:
    - When activated, the bot becomes a helpful companion
    - The bot observes the current board and:
    - Suggests the next step with clear explanations
    - Corrects user mistakes with reasoning
    - If no logical moves are left, it makes a valid and correct guess
    - All tips and interactions should be grounded in the current game state and explained in real-time
    - Focus on user-friendly design, real-time logic, and immersive gameplay experience.`
    },
    {
    type: "note",
    text: `After testing the output, I realized I wanted the layout to be better (bot beside board on desktop, below on mobile), hints not to show unless asked, and to fix an issue with starting after manual input.`
    },
    {
    type: "input",
    label: "Input",
    code: `The first prompt is over so don't repeat the same thing.
    I want you to give me the second prompt to give the AI:
    - The layout to be better - it's OK if the Sudoku bot is below the Sudoku board in mobile, but make the Sudoku bot to be beside the board.
    - Hints not to be shown unless asked.
    - Unable to start the game after inputting for some reason - it's getting stuck there.
    - Proper layout aligning and everything.`
    },
    {
    type: "output",
    label: "AI Output",
    code: `Improve the existing pure HTML, CSS, and JavaScript Sudoku web app (no JSX, TSX, imports, or exports).

    Fixes and Enhancements Required:

    Responsive Layout Enhancements:
    - Ensure the Sudoku Bot panel is positioned beside the Sudoku board on larger screens.
    - On smaller/mobile screens, allow the bot panel to stack below the board gracefully.
    - Maintain clean alignment and spacing throughout the layout for all screen sizes.

    Hint System Update:
    - Do not show hints by default.
    - Only display hints or tips when the user explicitly asks (e.g., clicks a "Hint" or "Next Step" button).

    Gameplay Flow Fix:
    - Fix the issue where the game gets stuck after manual input (user should be able to start the game after inputting a custom puzzle).
    - Ensure all input validation and game start logic works seamlessly for both AI-generated and manually entered boards.

    General Layout & UI:
    - Make sure all components are properly aligned, responsive, and user-friendly.
    - Polish UI elements for a smoother, more intuitive interaction experience.
    - Keep everything clean, functional, and mobile-friendly while focusing on a smooth gameplay experience and AI interactions.`
    },
    {
    type: "note",
    text: `I continued this input → output → feedback loop for a total of 6–8 cycles, refining requirements, clarifying issues, and getting more advanced and polished outputs each time, until the app was robust and met all my needs.`
    },
    {
    type: "input",
    label: "Input",
    code: `Add a "Solve Entire Board" feature with animated solving, real-time progress, and the ability to cancel.

    Hints should include clear explanations and highlight relevant cells.

    All bot interactions must be context-aware and explain the logic behind each move.`
    },
    {
    type: "output",
    label: "AI Output",
    code: `Enhance the Sudoku app with:

    - "Solve Entire Board" button: triggers animated, step-by-step solving of the current puzzle, with real-time progress display. Allow users to cancel at any time.
    - Hint system update: Hints provide detailed explanations and highlight the relevant cells with animation.
    - Bot logic: All suggestions and corrections must include clear, context-aware reasoning based on the current board state.

    Maintain responsiveness, accessibility, and a smooth user experience throughout.`
    }
    ];

    // Render steps and flow
    const stepFlowElem = document.getElementById("step-flow");
    let stepNumber = 1;
    steps.forEach((step, idx) => {
    if (step.type === "input" || step.type === "output") {
    const div = document.createElement("div");
    div.className = "step";
    div.innerHTML = `<span class="step-number">${stepNumber}</span>
    <div style="flex:1;">
    <b>${(step.type === "input") ? "Input" : "AI Output"}</b>
    <div class="${step.type === "input" ? "input-box" : "output-box"}">${step.code}</div>
    </div>`;
    stepFlowElem.appendChild(div);
    stepNumber++;
    } else if (step.type === "note") {
    // Show arrow and note after step
    const arrow = document.createElement("div");
    arrow.className = "arrow";
    arrow.innerHTML = "↓";
    stepFlowElem.appendChild(arrow);

    const note = document.createElement("div");
    note.className = "note-block";
    note.innerHTML = step.text;
    stepFlowElem.appendChild(note);

    // Show arrow between note and next step if not last
    if(idx < steps.length - 1) {
    const arrow2 = document.createElement("div");
    arrow2.className = "arrow";
    arrow2.innerHTML = "↓";
    stepFlowElem.appendChild(arrow2);
    }
    }
    });